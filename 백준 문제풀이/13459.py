# https://www.acmicpc.net/problem/13459
'''
브루트포스,구현
R이 빠지고, 뒤따라서 B가 빠지게 되는지 아닌지 검사해야함
B가 같이 빠지는 일이 발생하면 성공한것이 아니므로

구현해야 할 부분
각 중력 방향에 따른 함수처리
구멍을 만나거나, 벽을 만날때까지 R과 B의 위치를 이동시켜야함
B가 구멍에 빠졌는지 매 단계별로 검사해야함
'''
n,m = map(int,input().split())
game = [list(input()) for _ in range(n)]

# 오른쪽으로 구슬을 밀때의 동작
# 확인해야 하는 부분 
# 1. 이동하는 과정에서 R이 구멍에 빠지게 되었는지
# 1.2 빠졌다면 이후에 뒤따라서 B도 빠지는지(이동하는 방향과 반대 방향을 돌면서 B가 존재하는지 확인)
def goRight():
    global rx,ry,bx,by # 현재 빨간 구슬과 파란 구슬의 위치 정보
    # 빨간공이 움직이고자 하는 방향에 파란공이 존재할 수 있음
    # 그러한 경우 파란공이 먼저 움직여야 빨간공이 이어서 움직일 수 있음
    # 같은 라인에 빨간공과 파란공이 위치하는지 확인
    if rx == ry: # 같은 라인에 있다면
        start = min(rx,ry) # 두 값 중에 작은 값을 탐색의 시작 위치로 지정하고
        end = max(rx,ry) # 두 값 중에 큰 값을 탐색의 끝 위치로 지정
        # 탐색 범위 안에 '#'이 있는지 확인, #이 존재한다면 두 공은 독립적으로 움직일 수 있음
        # #이 없다면 독립적으로 움직일 수 없음(

    isRedinHall = False
    # 빨간 구슬 먼저 움직이기
    for i in range(ry,len(n)): # 빨간 구슬의 ry좌표에서부터 끝에 이르기까지(rx는 고정시켜두고)
        # 오른쪽으로 미는 것이므로, 높이(rx)는 고정시켜두고 ry좌표만 신경쓰기
        # 벽을 만날때 까지 밀기, 혹은 구멍을 만날때까지 밀기
        if game[rx][i] == "#": # 벽을 만났다면, 그 전에서 위치 멈추기
            rx = i-1 # 이전 위치에 빨간 공 멈추기
        elif game[rx][i] == 'O': # 구멍을 만나면 체크
            isRedinHall = True
            break

    # 파란 구슬 움직이기