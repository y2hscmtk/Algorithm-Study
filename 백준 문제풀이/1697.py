# https://www.acmicpc.net/problem/1697

'''
문제
수빈이는 동생과 숨바꼭질을 하고 있다. 수빈이는 현재 점 N(0 ≤ N ≤ 100,000)에 있고, 동생은 점 K(0 ≤ K ≤ 100,000)에 있다. 

수빈이는 걷거나 순간이동을 할 수 있다. 만약, 수빈이의 위치가 X일 때 걷는다면 1초 후에 X-1 또는 X+1로 이동하게 된다. 

순간이동을 하는 경우에는 1초 후에 2*X의 위치로 이동하게 된다.

수빈이와 동생의 위치가 주어졌을 때, 수빈이가 동생을 찾을 수 있는 가장 빠른 시간이 몇 초 후인지 구하는 프로그램을 작성하시오.

입력
첫 번째 줄에 수빈이가 있는 위치 N과 동생이 있는 위치 K가 주어진다. N과 K는 정수이다.

출력
수빈이가 동생을 찾는 가장 빠른 시간을 출력한다.

'''

'''
아이디어 : 일직선으로 모두 이어진 좌표이므로, 0~100000를 벗어나지 않는 선에서 BFS를 수행해주면 될듯하다.
이동가능한 인접 정점으로는 x-1,x+1,2*x이다.
dp테이블을 만들어서, 수빈이의 좌표와 동생의 좌표가 일치하게 되는 시점의 dp값을 출력하도록 하면 될것같다.
'''
from collections import deque
n, k = map(int, input().split())

dp = [-1]*100001  # 방문정보와 시간을 누적시켜 기록할 배열

# 탐색을 시작하는 위치 큐에 삽입
queue = deque()
queue.append(n)


# bfs
def bfs(n):
    global dp, k, queue
    dp[n] = 0  # 시작위치 방문처리
    while queue:  # 큐가 존재하는동안 탐색 지속
        x = queue.popleft()
        # 수빈이의 현재 위치가 동생의 좌표와 같아진다면 탐색 종료
        if x == k:
            return dp[x]  # 몇초가 걸렸는지 출력
        # 3가지 방향에 대해 탐색
        for nx in (x-1, x+1, 2*x):
            # 영역을 벗어나지 않는 선에서, 아직 값이 기록되지 않은경우 업데이트
            if 0 <= nx <= 100000:
                if dp[nx] == -1:
                    dp[nx] = dp[x] + 1
                    queue.append(nx)  # 해당좌표 큐에 삽입


print(bfs(n))
