# https://www.acmicpc.net/problem/1463

'''
정수 X에 사용할 수 있는 연산은 다음과 같이 세 가지 이다.

    1. X가 3으로 나누어 떨어지면, 3으로 나눈다.
    2. X가 2로 나누어 떨어지면, 2로 나눈다.
    3. 1을 뺀다.
    
정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서 1을 만들려고 한다. 연산을 사용하는 횟수의 최솟값을 출력하시오.
'''

'''
동적 프로그래밍에는 하향식(탑 다운)과 상향식(보텀 업)으로 해결가능하다.
dp테이블에 이미 구한 결과를 저장하고, 이를 이용하여 값을 도출해 나간다.
'''

# 숫자를 입력받는다.
x = int(input())

# 결과를 저장할 dp 테이블
dp = [0]*1000001  # 10**6만큼의 dp테이블을 작성한다.

# 2로 나눌때, 3으로 나눌때, 1을 뺄때 3가지의 경우중 가장 최솟값을 출력하면 답이되므로 점화식은 다음과 같다
# ai = min(ai/2,ai/3,ai-1)+1

# 상향식 방법을 이용하여 반복을 수행한다.
for i in range(2, x+1):  # 0의 경우는 수행하지 않고, 1의경우는 답이 1이 되므로 2부터 반복을 수행한다.
    dp[i] = dp[i-1] + 1  # 현재의 수에서 1을 빼는 경우
    # 수가 2로 나누어 떨어지는 경우
    if i % 2 == 0:
        dp[i] = min(dp[i], dp[i//2]+1)
    # 수가 3으로 나누어 떨어지는 경우
    if i % 3 == 0:
        dp[i] = min(dp[i], dp[i//3]+1)
    # 점화식의 조건에 따라, 1을 뺐을때와 2또는 3으로 나누었을때의 경우중 최솟값을 dp의 값으로 채택한다.

# 점화식에 기록된 결과에 따라 값을 출력한다.
print(dp[x])
