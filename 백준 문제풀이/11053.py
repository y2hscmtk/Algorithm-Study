# https://www.acmicpc.net/problem/11053

'''
수열 A가 주어졌을 때, 가장 긴 증가하는 부분 수열을 구하는 프로그램을 작성하시오.

예를 들어, 수열 A = {10, 20, 10, 30, 20, 50} 인 경우에 가장 긴 증가하는 부분 수열은 A = {10, 20, 10, 30, 20, 50} 이고, 길이는 4이다.

'''

'''
아이디어 : 입력받은 배열을 정렬시킨후 dp테이블에 값을 기록한다
만약 dp 테이블에 같은 숫자가 존재한다면 해당 요소는 무시하고 다음 값부터 탐색한다.
=> 배열을 정렬하여 값을 뽑는것이 아닌, 현재 존재하는 배열에서 부분 수열을 찾아야 하는것 따라서 정렬을 시키면 안된다.

'''

# 풀이 참고 https://foramonth.tistory.com/12

n = int(input())

dp = [0]*(n)  # 원본 배열의 해당 인덱스를 부분 배열의 요소로 삼을것인지 여부를 기록

dp[0] = 1

data = list(map(int, input().split()))

# 입력받은 data의 각 인덱스에서 dp값이 가장 큰 인덱스에 +1을 해주면 된다.

for i in range(1, n):
    for j in range(i):
        # 만족해야 하는 조건
        # 이전의 숫자들이 현재 숫자들보다 작은 숫자일것
        # 이전 숫자들중 가장 큰 값까지 이뤄지는 수열일것
        if data[j] < data[i] and dp[j] > dp[i]:
            dp[i] = dp[j]  # dp값 업데이트
    dp[i] += 1  # 현재 수까지 이어지는 수열을 작성해야 하므로 +1

print(max(dp))  # dp에 기록된 수중 가장 큰 값이 최대 수열의 길이가 됨
