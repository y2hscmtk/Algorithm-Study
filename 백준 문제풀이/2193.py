# https://www.acmicpc.net/problem/2193

'''
이찬수

0과 1로만 이루어진 수를 이진수라 한다. 이러한 이진수 중 특별한 성질을 갖는 것들이 있는데, 이들을 이친수(pinary number)라 한다. 

이친수는 다음의 성질을 만족한다.

    1.이친수는 0으로 시작하지 않는다.
    2.이친수에서는 1이 두 번 연속으로 나타나지 않는다. 즉, 11을 부분 문자열로 갖지 않는다.

예를 들면 1, 10, 100, 101, 1000, 1001 등이 이친수가 된다. 

하지만 0010101이나 101101은 각각 1, 2번 규칙에 위배되므로 이친수가 아니다.

N(1 ≤ N ≤ 90)이 주어졌을 때, N자리 이친수의 개수를 구하는 프로그램을 작성하시오.
'''

# 해당 자리수의 이찬수를 계산
n = int(input())

dp = [0]*n

# 1번 규칙을 만족하기 위해서 첫번째 자리수와 두번째 자리수는 무조건 1과 0으로 고정되어야 한다.
# 예를 들어 3자리 수라면 10은 고정된 상태로 10/1 10/0 이 두가지 수가 해답이 되므로 dp[0]과 dp[1]에 대한 정보는 미리 기록이 가능하다.


# 6자리 수를 구한다고 가정해보면
# 1 0 _ _ _ _ 에 대하여 3번째자리 수가 0인 경우와 1인 경우로 분류 가능하다.
# 세번째 자리 수가 0인 경우는 모든 자리 수가 0인 경우를 제외하면, 0001, 0010, 0100, 0101으로 dp[0] + dp[1] + dp[2]와 같다.
# 네번째 자리 수가 1인 경우는 다섯번째 자리수 또한 0이 되어야 함을 의미하므로 4개의 칸에 대하여 이찬수를 완성시켜야한다.
# 따라서 dp[3]의 개수와 같아진다.
# 이를 통해 dp[n] = dp[n-2] + dp[n-3] + ... + dp[0] + 1(나머지 모든 칸이 0이 되는 경우) 라는 점화식을 세울 수 있다.

# 이찬수의 개수 구하기
for i in range(n):
    if i == 0:
        dp[0] = 1  # 1
    elif i == 1:
        dp[1] = 1  # 10
    elif i == 2:
        dp[2] = 2  # 10/1 10/0
    # 4자리수 이상의 경우에 대해 아래 알고리즘 수행 (i>=3)
    for j in range(2, i+1):
        dp[i] += dp[i-j]
    dp[i] += 1  # 모든 빈 칸이 0이 되는 경우


# n-1번째에 n자리수 이찬수의 개수가 담긴다.
print(dp[n-1])
