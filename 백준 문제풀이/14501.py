# https://www.acmicpc.net/problem/14501
'''
상담원으로 일하고 있는 백준이는 퇴사를 하려고 한다.

오늘부터 N+1일째 되는 날 퇴사를 하기 위해서, 남은 N일 동안 최대한 많은 상담을 하려고 한다.

백준이는 비서에게 최대한 많은 상담을 잡으라고 부탁을 했고, 비서는 하루에 하나씩 서로 다른 사람의 상담을 잡아놓았다.

각각의 상담은 상담을 완료하는데 걸리는 기간 Ti와 상담을 했을 때 받을 수 있는 금액 Pi로 이루어져 있다.

N = 7인 경우에 다음과 같은 상담 일정표를 보자.

 	1일	2일	3일	4일	5일	6일	7일
Ti	3	5	1	1	2	4	2
Pi	10	20	10	20	15	40	200

1일에 잡혀있는 상담은 총 3일이 걸리며, 상담했을 때 받을 수 있는 금액은 10이다. 

5일에 잡혀있는 상담은 총 2일이 걸리며, 받을 수 있는 금액은 15이다.

상담을 하는데 필요한 기간은 1일보다 클 수 있기 때문에, 모든 상담을 할 수는 없다. 

예를 들어서 1일에 상담을 하게 되면, 2일, 3일에 있는 상담은 할 수 없게 된다. 2일에 있는 상담을 하게 되면, 3, 4, 5, 6일에 잡혀있는 상담은 할 수 없다.

또한, N+1일째에는 회사에 없기 때문에, 6, 7일에 있는 상담을 할 수 없다.

퇴사 전에 할 수 있는 상담의 최대 이익은 1일, 4일, 5일에 있는 상담을 하는 것이며, 이때의 이익은 10+20+15=45이다.

상담을 적절히 했을 때, 백준이가 얻을 수 있는 최대 수익을 구하는 프로그램을 작성하시오.
'''
# 스케쥴 개수
n = int(input())

# 스케쥴을 기록할 공간 0일째 업무 : 0일, 0원의 수익
schedule = [[0, 0]]

for i in range(n):
    t, p = map(int, input().split())
    schedule.append([t, p])


benefit = 0  # 얻을수 있는 최대 이득


# 재귀 함수 작성
# 업무 선택(현재날짜)
def select_job(c_date, c_benefit):
    if c_date > n or c_date + schedule[c_date][0] > n+1:  # 당일은 일을 할 수 있으므로
        return c_benefit  # 업무를 수락할수 없는경우는 지금까지의 수익을 리턴
    # 현재 업무를 수락하고, 이득을 더해서 재귀함수 호출
    s_benefit = select_job(
        c_date+schedule[c_date][0], c_benefit+schedule[c_date][1])
    # 업무를 선택하지 않는 경우는 날짜만 하루를 더해서 재귀호출
    n_benefit = select_job(c_date+1, c_benefit)
    return max(s_benefit, n_benefit)

    # 날짜를 달리하며, 해당일의 업무를 수락할때와 아닐때로 결정
# for i in range(1, n+1):
#     # i번째 일 이후부터, n+1번째일을 수락하는 경우와 수락하지 않는 경우 모두 고려
#     for j in range(i, n+1):
#         # 업무를 수락할때,

#     day = i  # 현재 몇일째인지를 기록
#     temp_benefit = 0  # 현재 테스트 케이스에서 얻을수 있는 최대 이득
#     # i번째 업무를 처리하는데 걸리는 시간이, 퇴사일보다 늦어지면 업무수행불가
#     # 퇴사일을 넘지 않을때까지 업무 수락
#     while day <= n:
#         # 해당업무를 해결할수 없다면 반복문 탈출
#         if day + schedule[day][0] > n+1:
#             break
#         temp_benefit += schedule[day][1]  # 이득 더하기
#         day += schedule[day][0]  # 업무일 더하기
#     # 모든 날짜에 대해 최대 이득 갱신
#     benefit = max(benefit, temp_benefit)


print(select_job(1, 0))
