# https://www.acmicpc.net/problem/1932

'''
        7
      3   8
    8   1   0
  2   7   4   4
4   5   2   6   5
위 그림은 크기가 5인 정수 삼각형의 한 모습이다.

맨 위층 7부터 시작해서 아래에 있는 수 중 하나를 선택하여 아래층으로 내려올 때, 이제까지 선택된 수의 합이 최대가 되는 경로를 구하는 프로그램을 작성하라.

아래층에 있는 수는 현재 층에서 선택된 수의 대각선 왼쪽 또는 대각선 오른쪽에 있는 것 중에서만 선택할 수 있다.

삼각형의 크기는 1 이상 500 이하이다. 삼각형을 이루고 있는 각 수는 모두 정수이며, 범위는 0 이상 9999 이하이다.
'''

# 삼각형의 크기
n = int(input())

dp = []

# 삼각형 입력받기
for i in range(n):
    dp.append(list(map(int, input().split())))

'''
d[0][0]=7
d[1][0]=3+7, d[1][1]=8+7
d[2][0]=8+d[1][0], d[2][1]=1+max(d[1][0],d[1][1]), d[2][2]=0+d[1][1]
d[3][0]=2+d[2][0], d[3][1]=7+max(d[2][0],d[2][1]), d[3][2]=4+max(d[2][1],d[2][2]), d[3][3]=4+d[2][2]

다음과 같은 규칙에서 맨 오른쪽 길과 맨 왼쪽 길은 그저 위의 값들의 누적합이 되고,
가운데 길은 위의 길들 중 최대합을 선택하여 더하는것이 최대합임을 알 수 있다.

각 경로로 갈수 있는 최대 합을 기록해두고, 최종적으로 마지막 길들중 최대값을 출력하도록 하면 된다.
'''

# 층을 하나씩 올려가며 반복한다.
for i in range(1, n):
    # 각 층의 길 만큼 탐색한다. 왼쪽 길, 오른쪽 길, 가운데 길
    for j in range(len(dp[i])):
        # 왼쪽 길의 경우, 위의 길의 합을 누적시켜 더한다.
        if j == 0:
            dp[i][j] = dp[i][j]+dp[i-1][j]
        # 오른쪽 길의 경우, 위의 길의 합을 누적시켜 더한다.
        elif j == len(dp[i])-1:
            dp[i][j] = dp[i][j]+dp[i-1][j-1]
        # 가운데 길의 경우, 이전 길들의 누적합 중 가장 큰 값에 현재 값을 더하여 기록한다.
        else:
            dp[i][j] = max(dp[i-1][j-1], dp[i-1][j])+dp[i][j]
print(max(dp[n-1]))
