# https://www.acmicpc.net/problem/1167

'''
트리의 지름이란, 트리에서 임의의 두 점 사이의 거리 중 가장 긴 것을 말한다. 트리의 지름을 구하는 프로그램을 작성하시오.

트리가 입력으로 주어진다. 

먼저 첫 번째 줄에서는 트리의 정점의 개수 V가 주어지고 (2 ≤ V ≤ 100,000)둘째 줄부터 V개의 줄에 걸쳐 간선의 정보가 다음과 같이 주어진다. 

정점 번호는 1부터 V까지 매겨져 있다.

먼저 정점 번호가 주어지고, 이어서 연결된 간선의 정보를 의미하는 정수가 두 개씩 주어지는데, 하나는 정점번호, 다른 하나는 그 정점까지의 거리이다.

예를 들어 네 번째 줄의 경우 정점 3은 정점 1과 거리가 2인 간선으로 연결되어 있고, 정점 4와는 거리가 3인 간선으로 연결되어 있는 것을 보여준다. 

각 줄의 마지막에는 -1이 입력으로 주어진다. 주어지는 거리는 모두 10,000 이하의 자연수이다.
'''
import sys
# 재귀 최대허용치 설정
sys.setrecursionlimit(10000)
# 정점의 개수
v = int(input())

# 간선정보를 저장할 트리
tree = [[] for i in range(v+1)]

# 간선정보 입력받기
for i in range(v):
    # 간선정보 입력받기
    data = list(map(int, input().split()))
    # 정점번호, 다른 정점, 두 정점사이의 거리
    # -1이 아니면 data[0]와 연결된 간선 정보에 해당된다.
    # 간선정보 저장
    j = 1
    while data[j] != -1:
        tree[data[0]].append([data[j], data[j+1]])
        j += 2

# 트리 지름 구하기 알고리즘 시작
# 1. 시작 정점에서 가장 멀리 떨어진 정점 x 찾기
# 2. 정점 x에서 가장 멀리 떨어진 정점 y 찾기
# 3. x에서 y까지의 거리가 트리의 지름에 해당됨

# DFS을 통해 위의 과정을 수행함


def DFS(start, d):
    # 인접정점을 기준으로 깊이우선 탐색
    for node, cost in tree[start]:
        # 아직 방문한적 없는 정점에 한해서 방문
        if distance[node] == -1:
            # 길이를 누적시켜 저장
            distance[node] = d + cost
            # 길이를 누적시켜 DFS
            DFS(node, d+cost)


# 시작정점에서의 거리를 기록할 배열
distance = [-1]*(v+1)
distance[1] = 0  # 1~1까지의 거리 : 0
# 1. 시작 정점에서 가장 멀리 떨어진 정점 x 찾기
DFS(1, 0)

# 시작 정점에서 가장 멀리 떨어진 정점의 인덱스(번호)
x = distance.index(max(distance))
distance = [-1]*(v+1)  # 새로이 거리를 측정하기 위해 초기화
distance[x] = 0  # x~x까지의 거리 : 0
# 2. x에서 가장 멀리 떨어진 정점 y 찾기
DFS(x, 0)

# x에서 가장 멀리떨어진 정점 y 까지의 거리가 트리의 지름이 됨
print(max(distance))
