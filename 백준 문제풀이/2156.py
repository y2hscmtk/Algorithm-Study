# https://www.acmicpc.net/problem/2156

'''
효주는 포도주 시식회에 갔다. 그 곳에 갔더니, 테이블 위에 다양한 포도주가 들어있는 포도주 잔이 일렬로 놓여 있었다. 

효주는 포도주 시식을 하려고 하는데, 여기에는 다음과 같은 두 가지 규칙이 있다.

1.포도주 잔을 선택하면 그 잔에 들어있는 포도주는 모두 마셔야 하고, 마신 후에는 원래 위치에 다시 놓아야 한다.
2.연속으로 놓여 있는 3잔을 모두 마실 수는 없다.

효주는 될 수 있는 대로 많은 양의 포도주를 맛보기 위해서 어떤 포도주 잔을 선택해야 할지 고민하고 있다. 

1부터 n까지의 번호가 붙어 있는 n개의 포도주 잔이 순서대로 테이블 위에 놓여 있고, 각 포도주 잔에 들어있는 포도주의 양이 주어졌을 때, 

효주를 도와 가장 많은 양의 포도주를 마실 수 있도록 하는 프로그램을 작성하시오. 

예를 들어 6개의 포도주 잔이 있고, 각각의 잔에 순서대로 6, 10, 13, 9, 8, 1 만큼의 포도주가 들어 있을 때, 

첫 번째, 두 번째, 네 번째, 다섯 번째 포도주 잔을 선택하면 총 포도주 양이 33으로 최대로 마실 수 있다.

'''

n = int(input())

# 최대로 마실 수 있는 포도주의 누적합을 저장할 배열
dp = [0]*n

# 포도주를 저장할 배열
data = []

# 포도주의 양 입력받기
for i in range(n):
    data.append(int(input()))


# 포도주는 마실수도 있고, 안마실수도 있으므로 => 해당 잔을 마시는것이 이득인지, 손해인지를 따져서 선택해야한다.
for i in range(n):
    # 1번째와 2번째잔만 존재하는 경우에는 포도주를 마시는것이 이득이므로 마신다.
    if i == 0:
        dp[0] = data[0]
    elif i == 1:
        dp[1] = data[0] + data[1]
    # 3번째 잔부터는 포도주를 마시는경우와 마시지않는경우를 고려한다.
    elif i == 2:
        dp[2] = max(data[0]+data[1], data[0]+data[2], data[1]+data[2])

    # 4번째 잔부터는 해당잔을 마시느냐 안마시느냐에 따라, 이전잔을 못마실수도 있으므로 점화식을 달리한다.
    else:
        # 포도주를 안마시는 경우는 해당 잔 이전까지의 누적합이 최대가 된다. dp[i] => dp[i-1]
        dp[i] = max(dp[i-1], data[i]+data[i-1]+dp[i-3], data[i]+dp[i-2])

# # 누적합 계산하기(다이나믹 프로그래밍)
# for i in range(n):
#     # 0번째와 1번째까지의 경우를 고려할때는 앞에 놓여진 포도주를 마시는것이 이득이므로
#     if i == 0:
#         dp[0] = data[0]
#     elif i == 1:
#         dp[1] = data[0] + data[1]
#     # 2번째 경우에 대해서는 0,1와 0,2중 큰 값을 선택한다.
#     elif i == 2:
#         dp[2] = max(data[0]+data[1], data[0]+data[2], data[1]+data[2])
#     # 3잔을 연속해서 마실 수 없으므로
#     # dp[2]의 경우 data[2] + dp[0] 혹은 data[2] + data[1] + dp[-1] 둘 중의 최대값을 선택해야 하는 상황이 발생한다.
#     # 또한 포도주는 음이 아닌 정수이므로, 현재 데이터를 더하는것이 손해가 되는 경우는 없다.
#     # 이를 토대로 점화식을 작성하면 다음과 같다
#     # dp[n] = max(dp[n-2],data[n-1]+dp[n-3]) + data[n] (단,(n>=3))
#     else:
#         # 포도주의 양이 0인 경우도 고려해야 하므로 0인 경우는 선택하지 않고 다음잔으로 넘어가는것으로 간주해야한다.
#         if data[i] == 0:
#             dp[i] = dp[i-1]
#         else:
#             dp[i] = max(dp[i-2]+data[i], data[i-1]+dp[i-3]+data[i])

# 반복문 종료이후 dp테이블의 최대값을 출력한다.
print(max(dp))
