# https://www.acmicpc.net/problem/11055

'''
수열 A가 주어졌을 때, 그 수열의 증가 부분 수열 중에서 합이 가장 큰 것을 구하는 프로그램을 작성하시오.

예를 들어, 수열 A = {1, 100, 2, 50, 60, 3, 5, 6, 7, 8} 인 경우에 합이 가장 큰 증가 부분 수열은 A = {1, 100, 2, 50, 60, 3, 5, 6, 7, 8} 이고, 합은 113이다.

첫째 줄에 수열 A의 크기 N (1 ≤ N ≤ 1,000)이 주어진다.

둘째 줄에는 수열 A를 이루고 있는 Ai가 주어진다. (1 ≤ Ai ≤ 1,000)
'''

n = int(input())

dp = [0]*(n)  # 원본 배열의 해당 인덱스를 부분 배열의 요소로 삼을것인지 여부를 기록

data = list(map(int, input().split()))

dp[0] = data[0]  # 첫번째 dp의 값은 첫번째 데이터와 같음

# 입력받은 data의 각 인덱스에서 dp값이 가장 큰 인덱스에 현재 데이터를 누적시켜 더한다.

for i in range(1, n):
    for j in range(i):
        # 만족해야 하는 조건
        # 이전의 숫자들이 현재 숫자들보다 작은 숫자일것
        # 이전 숫자들중 가장 큰 값까지 이뤄지는 수열일것 => 그리고 이들의 누적합을 구해야함
        if data[j] < data[i] and dp[j] > dp[i]:
            dp[i] = dp[j]  # dp값 업데이트
    dp[i] += data[i]  #

print(max(dp))  # dp에 기록된 수중 가장 큰 값이, 가장 큰 합이 될 것
