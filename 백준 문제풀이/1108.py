# https://www.acmicpc.net/problem/1108

'''
플레 3

일단 모든 웹사이트에 1점을 준다. 만약에 웹사이트 A에 웹사이트 B로 가는 링크가 있다면, 웹사이트 B의 점수에 웹사이트 A의 점수를 더한다.

예를 들어, 웹사이트가 총 3개가 있다. A, B, C이다. 일단 모든 웹사이트의 점수는 1이다. 이제, 웹사이트 A와 B에 모두 C로 가는 링크가 있다고 하면, C의 점수는 3이 되고, A와 B의 점수는 그대로 1이다. 만약 어떤 검색어가 입력 되었는데, 이 웹사이트 A B C에 모두 해당하는 것이었다면, C가 가장 위에 표시된다.

이런 웹사이트에 점수를 매기는 일이 어려운 이유는 바로, 링크를 교환하는 사이트 들이 있기 때문이다. 이 말은 A가 B를 링크하고, B가 A를 링크하는 것이다. 따라서, 이런 현상으로 점수가 무한대로 늘어나는 것을 방지하기 위해서, A의 점수를 B에 더할 때는, B에서 A로의 링크가 직접적으로 또는 간접적으로 없을 때이다.

링크가 어떻게 되어있는 지가 주어지고, 웹사이트의 이름이 주어질 때, 그 웹사이트의 점수를 출력하는 프로그램을 작성하시오.
'''

'''
아이디어 : 
입력을 다 받은 후 알고리즘 시작, 입력받은 데이터를 토대로 그래프를 생성하고,
원하는 사이트에 대한 점수를 구할 때, 그 사이트의 인접 정점들을 대상으로 직접적, 간접적인 링크의 존재유무를 파악하여 계산한다.
길이 있는지 여부에 대해 알기위해 양방향이 아닌 단방향으로 그래프를 생성하고, 인접 정점에 대해서 해당 링크로의 길이 있는지를 구해야하므로 
길이 존재하는지 구하기 위해 탐색을 진행한다.
직접적, 간접적으로의 길이 존재하는지 여부를 카운트하여 점수를 출력하길 희망하는 사이트의 인접정점의 개수에서 해당 카운트를 빼면 원하는 결과를 얻을 수 있을것이다.
길이 존재하는지에 대한 탐색은, BFS를 이용하여 길이 존재함을 확인하면 그 즉시 BFS를 종료한다.
'''

dict = {0: [10, 50], 2: [11], 1: [30, 30]}

dict2list = list(dict)
print(dict2list)

# # n은 50보다 작은 자연수
# n = int(input())

# # n의 개수만큼 그래프안의 정점들이 존재하므로 그래프 생성
# graph = []

# # 입력을 편하게 받기위한 임시그래프
# fgraph = []

# for i in range(n):
#     # 데이터 입력받기
#     data = list(map(str, input().split()))
#     # 두번째 데이터가 인접정점의 개수이므로
#     num = int(data[1])
#     # 인접정점의 개수에 따라 자신에게 향하는 데이터 삽입가능
#     if num == 0:
#         # A 0 과 같이 표현되는 경우는 정점만 삽입
#         fgraph.append(data[0])
#     else:
#         fgraph.append([data[0]])
#         fgraph[i].append([data[j] for j in range(2, num+2)])
#         print(fgraph[i])
# print(fgraph)
# # n개의 정점에 대하여
# for i in range(n):
#     for site in data[i][1]: # 'B' ,'C' ,'D'등의 데이터가 site에 담김
#         for j in range(len(graph)):
#             if site not in graph:
#                 graph.append([site])
#             else: # 이미 등록되어 있다면

# 아래부터 graph에 알맞은 방향으로 fgraph를 수정하여 입력해야함
# for node in fgraph:
#     graph.append([node[0]])
# print(graph)
