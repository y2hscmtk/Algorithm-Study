'''
<DP 기본>
DP를 푸기위한 핵심 -> '규칙' 찾기 -> 점화식 찾아서 dp테이블로 구성하기
=> dp 테이블을 무엇으로 생각할지 정의하기
배열일 경우 앞 뒤에 0번째/n+1번째 인덱스를 추가하여 '패딩'으로 활용하기
재귀 생각하기 -> Memoization
'''
# https://www.acmicpc.net/problem/2747
'''
피보나치 수는 0과 1로 시작한다. 0번째 피보나치 수는 0이고, 1번째 피보나치 수는 1이다. 그 다음 2번째 부터는 바로 앞 두 피보나치 수의 합이 된다.

이를 식으로 써보면 Fn = Fn-1 + Fn-2 (n ≥ 2)가 된다.

n=17일때 까지 피보나치 수를 써보면 다음과 같다.

0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597

n이 주어졌을 때, n번째 피보나치 수를 구하는 프로그램을 작성하시오.

<분석>
문제에서 점화식과 초기값을 모두 알려준 케이스
점화식을 활용하기 위해선 초기값이 2개 필요함
dp테이블은 1차원으로 구성되며 dp[n]은 n번째 피보나치 수를 의미하도록 설계
'''
n = int(input())
dp = [0]*(n+1)
dp[1] = 1 # dp[0] = 0; dp[1] = 1
if n==1:
    print(1)
else:
    for i in range(2,n+1):
        dp[i] = dp[i-1] + dp[i-2]
    print(dp[n]) # n번째 피보나치 수를 출력한다.