# 길이가 N인 수열이 주어졌을 때, 그 수열의 합을 구하려고 한다. 하지만, 그냥 그 수열의 합을 모두 더해서 구하는 것이 아니라,

# 수열의 두 수를 묶으려고 한다. 어떤 수를 묶으려고 할 때, 위치에 상관없이 묶을 수 있다.

# 하지만, 같은 위치에 있는 수(자기 자신)를 묶는 것은 불가능하다. 그리고 어떤 수를 묶게 되면, 수열의 합을 구할 때 묶은 수는 서로 곱한 후에 더한다.

# 예를 들면, 어떤 수열이 {0, 1, 2, 4, 3, 5}일 때, 그냥 이 수열의 합을 구하면 0+1+2+4+3+5 = 15이다.

# 하지만, 2와 3을 묶고, 4와 5를 묶게 되면, 0+1+(2*3)+(4*5) = 27이 되어 최대가 된다.

# 수열의 모든 수는 단 한번만 묶거나, 아니면 묶지 않아야한다.

# # 수열이 주어졌을 때, 수열의 각 수를 적절히 묶었을 때, 그 합이 최대가 되게 하는 프로그램을 작성하시오.

# 아이디어
# 그리디 알고리즘의 원칙에 따라 현재상황에서 가장 큰 값을 갖게 하기 위해, 최대값 두 개를 서로 묶는것을 기본으로 하되,
# 최대값 2개중 한 값이 0이거나, 음수인 경우는 묶지않는다.
# 다음과 같은 과정을 배열안에 데이터가 남지않을때까지 반복한다.

n = int(input())

data = []

for i in range(n):
    data.append(int(input()))

data.sort()

sum = 0
i = 0
while n != 0:
    if n >= 2:  # 데이터가 2개이상 존재하는 경우에 한에서
        if data[i] > 0 and data[i+1]:  # 최대값과 두번째로 큰 값이 둘 다 양수라면
            sum += (data[i]*data[i+1])  # 두 수를 묶는다.
        else:
            sum += (data[i]+data[i+1])
    else:
        sum += data[i]
